import { firestore } from '@/app/firebase';
import { spotifyBaseUrl } from '@/lib/constants';
import { arrayUnion, doc, updateDoc } from 'firebase/firestore';
import { NextResponse } from 'next/server';
import { OpenAI } from 'openai';

interface Song {
  title: string;
  artist: string;
}

const fetchSongData = async (
  song: Song,
  access_token: string
): Promise<any> => {
  const response = await fetch(
    spotifyBaseUrl +
      `search?q=${song.title}&type=track&artist=${song.artist}&markert=us&limit=1`,
    {
      headers: {
        Authorization: `Bearer ${access_token}`,
      },
    }
  );
  if (!response.ok) {
    throw new Error(
      `Failed to fetch data for ${song.title}: ${response.status}`
    );
  }
  const responseBody = await response.json();
  return responseBody;
};

export async function POST(req: Request) {
  const { songs, playlists, access_token, user_id } = await req.json();
  try {
    // Fetch every song generated by open ai
    const songFetchPromises = songs.map(
      (song: { title: string; artist: string }) =>
        fetchSongData(song, access_token)
    );

    // Wait for all songs to be fetched from
    const songDataArray = await Promise.all(songFetchPromises);

    // songDataArray now contains the data for each song

    // Update the songs array in db with all of its spotify information
    const userSongsDocRef = doc(firestore, 'users', user_id);
    await updateDoc(userSongsDocRef, { songs: songDataArray });

    // Fetch every song in generated playlist by open ai
    const playlistSongFetchPromises: Promise<any>[] = [];
    const playlistFetchPromises = playlists.map(
      (playlist: { playlistName: string; tracks: Song[] }) => {
        playlist.tracks.forEach((song: { title: string; artist: string }) => {
          const promise = fetchSongData(song, access_token);
          playlistSongFetchPromises.push(promise);
        });
      }
    );

    // Wait for all songs from playlist to be fetched
    await Promise.all(playlistFetchPromises);

    // Get all songs from playlist to be fetched from promises array
    const playlistSongDataArray = await Promise.all(playlistSongFetchPromises);

    // playlistSongDataArray now contains the data for every song in playlists

    // Generate a playlist cover for the newly generated plalyist
    const client = new OpenAI({
      apiKey: String(process.env.NEXT_PUBLIC_OPENAI_API_KEY),
    });

    const response = await client.images.generate({
      model: 'dall-e-3',
      prompt: `${playlists[0]?.playlistName} playlist art cover`,
      size: '1024x1024',
      quality: 'standard',
      n: 1,
    });

    const image_url = response.data[0].url;

    // Update playlist array in db with all of its spotify information
    const userPlaylistDocRef = doc(firestore, 'users', user_id);
    console.log(playlists[0]?.playlistName);
    const updatedPlaylist = {
      playlistName:
        playlists && playlists[0]?.playlistName
          ? playlists[0].playlistName
          : 'DefaultPlaylist',
      playlistCover: image_url,
      ...playlistSongDataArray.filter(Boolean),
    };
    console.log(updatedPlaylist);
    await updateDoc(userPlaylistDocRef, {
      playlists: arrayUnion(updatedPlaylist),
    });

    return NextResponse.json({ status: 200 });
  } catch (error) {
    console.error('Error fetching song data:', error);
    return NextResponse.json({ status: 404 });
  }
}
